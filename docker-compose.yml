version: '3.8'

services:
  # Service PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: devops_db
    restart: always
    environment:
      POSTGRES_USER: devops_user
      POSTGRES_PASSWORD: devops_password
      POSTGRES_DB: devops_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - devops_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devops_user -d devops_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops_backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://devops_user:devops_password@db:5432/devops_db
      - ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
    networks:
      - devops_network
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service Frontend Node.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops_frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
    depends_on:
      - backend
    networks:
      - devops_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

# RÃ©seau commun pour tous les services
networks:
  devops_network:
    driver: bridge

# Volumes persistants
volumes:
  postgres_data:
    driver: local
