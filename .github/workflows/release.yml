name: Release

on:
  push:
    tags:
      - 'v*.*.*'   # version stable

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Version
        id: v
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Changelog (facultatif)
        run: |
          VERSION="${{ steps.v.outputs.VERSION }}"
          awk "/## \[${VERSION#v}\]/,/## \[/{if(/## \[${VERSION#v}\]/)f=1;else if(/## \[/)f=0;if(f)print}" CHANGELOG.md > release_notes.md || echo "Version $VERSION" > release_notes.md

      - name: GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.v.outputs.VERSION }}
          body_path: release_notes.md

  publish-docker:
    name: Build & Push Docker Hub
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        service: [backend, frontend]

    env:
      DOCKERHUB_IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/tp-devops

    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3    # multi-arch OK
      - uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Version
        id: v
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build & Push ${{ matrix.service }}
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          # On pousse DANS le même repo Docker Hub "tp-devops",
          # avec des tags préfixés par service (backend|frontend)
          tags: |
            ${{ env.DOCKERHUB_IMAGE }}:${{ matrix.service }}-${{ steps.v.outputs.VERSION }}
            ${{ env.DOCKERHUB_IMAGE }}:${{ matrix.service }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-render-backend:
    name: Deploy Render (backend)
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - name: Trigger Render deploy
        run: |
          curl -sfS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID_BACKEND/deploys" \
            -d '{"clearCache":false}'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_BACKEND: ${{ secrets.RENDER_SERVICE_ID_BACKEND }}

  deploy-render-frontend:
    name: Deploy Render (frontend)
    runs-on: ubuntu-latest
    needs: publish-docker
    steps:
      - name: Trigger Render deploy
        run: |
          curl -sfS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/$RENDER_SERVICE_ID_FRONTEND/deploys" \
            -d '{"clearCache":false}'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID_FRONTEND: ${{ secrets.RENDER_SERVICE_ID_FRONTEND }}
