name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # Job 1: Tests du Backend
  test-backend:
    name: Tests Backend FastAPI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Installation des dépendances
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lancement des tests avec pytest
        working-directory: ./backend
        run: |
          pytest -v --tb=short

      - name: Génération du rapport de couverture
        working-directory: ./backend
        run: |
          pip install pytest-cov
          pytest --cov=. --cov-report=xml --cov-report=term

      - name: Upload du rapport de couverture
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: false

  # Job 2: Lint du Backend
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Installation de flake8
        run: |
          pip install flake8

      - name: Lint avec flake8
        working-directory: ./backend
        run: |
          # Arrêter le build si erreurs de syntaxe ou noms non définis
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Linter le reste avec des règles plus souples
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job 3: Build des images Docker
  build-docker:
    name: Build Images Docker
    runs-on: ubuntu-latest
    needs: [test-backend, lint-backend]

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Configuration de Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login au GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extraction des métadonnées Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build de l'image Docker ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test de l'image Docker
        run: |
          docker build -t test-${{ matrix.service }} ./${{ matrix.service }}
          echo "✓ Image ${{ matrix.service }} construite avec succès"

  # Job 5: Test d'intégration avec Docker Compose
  integration-test:
    name: Tests d'intégration
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Création du fichier .env
        run: |
          cp .env.example .env

      - name: Démarrage des services avec Docker Compose
        run: |
          docker compose up -d --build

      - name: Attente du démarrage des services
        run: |
          echo "Attente du démarrage des services..."
          sleep 30

      - name: Vérification des services
        run: |
          docker compose ps

      - name: Test de santé du backend
        run: |
          curl --fail --retry 5 --retry-delay 5 http://localhost:8000/ || exit 1
          echo "✓ Backend accessible"

      - name: Test de santé du frontend
        run: |
          curl --fail --retry 5 --retry-delay 5 http://localhost:3000/ || exit 1
          echo "✓ Frontend accessible"

      - name: Test de l'API /articles
        run: |
          response=$(curl -s http://localhost:8000/articles)
          echo "$response" | jq . > /dev/null || exit 1
          echo "✓ API /articles retourne du JSON valide"

      - name: Test de la base de données
        run: |
          docker compose exec -T db psql -U devops_user -d devops_db -c "SELECT COUNT(*) FROM articles;" || exit 1
          echo "✓ Base de données accessible"

      - name: Affichage des logs en cas d'erreur
        if: failure()
        run: |
          docker compose logs

      - name: Arrêt des services
        if: always()
        run: |
          docker compose down -v

  # Job 6: Analyse de sécurité
  security-scan:
    name: Scan de sécurité
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Scan de sécurité du backend avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './backend'
          format: 'table'
          exit-code: '0'

      - name: Scan de sécurité du frontend avec Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'table'
          exit-code: '0'
